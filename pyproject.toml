[build-system]
requires = ["setuptools", "wheel", "Cython", "toml"]

[project]
name = "mwlib"
version = "0.18.1"
description = "mediawiki parser and utility library"
authors = [
    {name = "pediapress.com", email = "info@pediapress.com"}
]
readme = "README.md"
requires-python = ">=3.11, <3.13"
dependencies = [
    "Cython",
    "Pillow",
    "apipkg",
    "authlib>=1.6.0",
    "bottle",
    "click",
    "gevent",
    "httpx[http2]",
    "lxml",
    "mwclient",
    "odfpy",
    "py",
    "pyPdf",
    "pygments",
    "pyparsing",
    "python-dotenv>=1.1.1",
    "reportlab",
    "roman",
    "simplejson",
    "sqlitedict",
    "timelib>=0.3.0",
    "toml",
]
keywords = ["mediawiki", "wikipedia", "parser", "pdf", "writer"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: Wiki",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: HTML",
    "Topic :: Text Processing :: Markup :: XML",
]
license = "BSD-3-Clause"

[dependency-groups]
dev = [
    "pytest",
    "pytest-httpx>=0.35.0",
    "pytest-xdist",
    "wsgi-intercept",
]

[project.urls]
homepage = "https://code.pediapress.com/"
repository = "https://github.com/pediapress/mwlib"

[project.entry-points."mwlib.writers"]
odf = "mwlib.writers.odf.writer:writer"
rl = "mwlib.writers.rl.writer:writer"


[project.scripts]
mw-render = "mwlib.core.main_trampoline:mw_render_main"
mw-version = "mwlib.utils._version:main"
mw-zip = "mwlib.core.main_trampoline:mw_zip_main"
postman = "mwlib.core.main_trampoline:postman_main"

[tool.ruff]
force-exclude = true
target-version = "py311"
required-version = ">=0.11.0"
output-format = "concise"
line-length = 99



[tool.ruff.lint]
select = [
#  "A",      # flake8-comprehensions
#  "ANN",    # flake8-annotations
#  "B",      # flake8-bugbear
#  "C4",     # flake8-executable
  "C90",    # mccabe (complexity)
  "D",      # pydocstyle
  "E",      # pycodestyle error
#  "EXE",    # flake8-executable
  "F",      # pyflakes
#  "G",      # flake8-logging-format
  "I",      # isort
#  "ISC",    # flake8-implicit-str-concat
#  "N",      # pep8-naming
#  "PGH004", # disalloy blanket noqa
#  "PIE",    # flake8-pie
#  "PL",     # pylint
#  "PT",     # flake8-pytest-style
#  "Q",      # flake8-quotes
#  "RET",    # flake8-return
#  "RUF",    # Ruff-specific rules
  "SIM",    # flake8-simplify
  "TID",    # flake8-tidy-imports
#  "UP",     # pyupgrade
#  "W",      # pycodestyle warning
]
#extend-select = ["C4", "I", "SIM", "TCH", "UP", "W"]
ignore = ["C408", "D10", "D203", "D213", "E501", "F401", "F403", "F405", "G004"]
flake8-tidy-imports.ban-relative-imports = "all"

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "I", "SIM", "TCH", "UP", "W"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".idea",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]


# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 20.
max-complexity = 20
